% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parent_env.R, R/parent_envs.R, R/top_env.R
\name{parent_env}
\alias{parent_env}
\alias{parent_envs}
\alias{top_env}
\title{Get the ancestral environments of an environment}
\usage{
parent_env(envir = parent.frame(), n = 1L)

parent_envs(envir = parent.frame(), until = globalenv(), extra = 0L)

top_env(envir, until = globalenv())
}
\arguments{
\item{envir}{An \code{\link[base:environment]{environment}}
or an object with an environment, e.g. a function or a formula.}

\item{n}{The generation of parent environment to get.
If \code{n = 0}, then \code{envir} is returned.
If \code{n = 1} (default), then \code{parent.env(envir)} is returned.
If \code{n = 2}, then \code{parent.env(parent.env(envir))} is returned,
and so on, until \code{emptyenv()} is returned.}

\item{until}{An \code{\link[base:environment]{environment}} to consider
the last parent environment.  If \code{until} is not one of the parent
environments, then \code{\link[base:emptyenv]{emptyenv()}} is the
last one.  It is also possible to specify a list of alternative
environments.}

\item{extra}{Maximum number of additional parent environments to include
after a matching "until" environment was identified.}
}
\value{
\code{parent_env()} returns an \code{\link[base:environment]{environment}}.

\code{parent_envs()} returns a named list of
\code{\link[base:environment]{environment}}s, where the names correspond
to \code{\link[=environment_name]{environment_name()}} of each environment.
The first element is always \code{envir}.
If \code{extra = 0L} (default), the last is \code{until} or
\code{\link[base:emptyenv]{emptyenv()}}, which equals \code{\link[=top_env]{top_env()}}.

\code{top_env()} returns the top parent
\code{\link[base:environment]{environment}}, which
is either the \code{until} environment or the empty environment.
}
\description{
Get the ancestral environments of an environment
}
\details{
Consider the following R script evaluated in the global environment:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{cargo <- rnorm(1e6)
a <- 2
f <- local(\{
  pi <- 3.14
  function() \{
    n <- 4
    a * pi / n
  \}
\})
}\if{html}{\out{</div>}}

The environment of function \code{f()} is the local environment that
contains the \code{pi} object, i.e. \code{environment(f)$pi} exists.
The parent environment of this environment is
\code{parent.envir(environment(f))}, which can also be obtained as
\code{parent_env(f)}.  This environment contains objects \code{a} and \code{cargo},
i.e. \code{parent_env(f)$a} and \code{parent_env(f)$cargo} exist.
If we sourced the script in the global environment, then
\code{parent_env(f)} is the global environment.

We can retrieve these two "ancestral" environments of \code{f()} using
\code{parent_envs(f)}, which can be represented visually as:

\if{html}{\out{<div class="sourceCode">}}\preformatted{+-----------------+
| parent_env(f):  | == parent_envs(f)[[2]]
| cargo = \{ 1e6 \} | == parent_env(f, n = 1L)
| a = 2           | == top_env(f)
| f               | == globalenv()
+-----------------+
        ^
        |
+-----------------+
| environment(f): | == parent_envs(f)[[1]]
| pi = 3.14       | == parent_env(f, n = 0L)
+-----------------+
}\if{html}{\out{</div>}}
}
\examples{
parent_env()

ns <- getNamespace("stats")
print(ns)
parent_env(ns, n = 0)    ## same as 'ns'
parent_env(ns, n = 1)    ## default
parent_env(ns, n = 2)
parent_env(ns, n = 3)
parent_env(ns, n = Inf)  ## always emptyenv()

f <- local({
  a <- 42
  local({
    pi <- 3.14
    function() pi * a
  })
})
environment(f)
parent_env(f, n = 0)     ## same as environment(f)
parent_env(f, n = 1)
parent_env(f, n = 2)
parent_env(f, n = 3)

parent_envs(emptyenv())
parent_envs(baseenv())
parent_envs(globalenv())
parent_envs(new.env(parent = baseenv()))

f <- local({
  a <- 42
  local({
    pi <- 3.14
    function() pi * a
  })
})
f_envs <- parent_envs(f, until = environment())
names(f_envs)

f_envs <- parent_envs(f, until = environment(), extra = 1L)
names(f_envs)

a <- 42
pi <- 3.14
f <- function() pi * a
env <- top_env(f)
print(env)
#stopifnot(identical(env, environment()))

f <- local({
  a <- 42
  local({
    pi <- 3.14
    function() pi * a
  })
})
env <- top_env(f)
print(env)
#stopifnot(identical(env, environment()))

make_fcn <- function() {
  a <- 42
  pi <- 3.14
  function() pi * a
}
f <- make_fcn()
env <- top_env(f)
print(env)
#stopifnot(identical(env, environment()))

}
