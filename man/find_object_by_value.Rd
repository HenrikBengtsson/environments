% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_object_by_value.R
\name{find_object_by_value}
\alias{find_object_by_value}
\title{Locate the original name and location of an object}
\usage{
find_object_by_value(
  value,
  from = parent.frame(),
  until = emptyenv(),
  which = c("first", "last", "all")
)
}
\arguments{
\item{value}{The R object whose location should be identified.}

\item{from}{An \code{\link[base:environment]{environment}}, or an object
with an environment (e.g. a \code{\link[base:function]{function}} and a
\code{\link[base:tilde]{formula}}), to start search from.}

\item{until}{An \code{\link[base:environment]{environment}} to consider
the last parent environment.  If \code{until} is not one of the parent
environments, then \code{\link[base:emptyenv]{emptyenv()}} is the
last one.  It is also possible to specify a list of alternative
environments.}

\item{which}{If \code{"first"} or \code{"last"}, then the first or the last
occurance of \code{object} among the parent frames is identified and returned.
If \code{"all"}, then all occurances are returned.}
}
\value{
If \code{which = "first"} or \code{which = "last"}, then a named list with
elements \code{name} and \code{envir}, where \code{name} is the name of \code{object}
as it is named in environment \code{envir}, i.e.
\code{identical(envir[[name]], object)}.
If \code{which = "all"}, then a list of (name, environment) lists are
returned; one for each matching occurence.
If the object could not be located when searching from environment
\code{from}, then NULL is returned.
}
\description{
Locate the original name and location of an object
}
\examples{
find_object_by_value(rnorm)

my_sum <- rnorm
find_object_by_value(my_sum)

find_object_by_value(my_sum, from = parent_env())

my_sum <- local(sum)
find_object_by_value(my_sum)


my_find <- function(object, envir = parent.frame()) {
  find_object_by_value(object, from = envir)
}

my_fcn <- local({
  g <- sum  ## this is never found
  function(f = NULL) {
    if (is.null(f)) {
      f <- g  ## this is found first
      my_find(f)
    } else {
      my_find(f, envir = parent.frame()) # skip argument 'f'
    }
  }
})
my_fcn()
my_fcn(my_sum)

topenv()
}
