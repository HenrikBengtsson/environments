% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_object.R
\name{find_object}
\alias{find_object}
\title{Find the environment where an object exists}
\usage{
find_object(name, mode = "any", from = parent.frame())
}
\arguments{
\item{name}{The name of the object to locate.}

\item{mode}{The \code{\link[base:mode]{mode}} of the object to locate.}

\item{from}{An \code{\link[base:environment]{environment}}, or an object
with an environment (e.g. a \code{\link[base:function]{function}} and a
\code{\link[base:tilde]{formula}}), to start search from.}
}
\value{
An \code{\link[base:environment]{environment}}, or NULL.
}
\description{
Find the environment where an object exists
}
\details{
The object is looked for in environment \code{from}. If it is found there,
then \code{from} is returned.  If not found there, the parent environment
of \code{from} is searched, and so on, until the "empty" environment
(\code{\link[base:emptyenv]{emptyenv()}}) is reached. In such cases,
no matching object could be found and NULL is returned.

\code{find_object()} is how \code{\link[base:exists]{base::exists()}}, \code{\link[base:get]{base::get()}}, and
\code{\link[base:assign]{base::assign()}} locate an object with \code{inherits = TRUE} (default).
For example, \code{exists(name) == !is.null(find_object(name))}. Similarly,
\code{object <- get(name)} is the same as:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{envir <- find_object(name)
if (is.null(envir)) stop(sprintf("Object \%d not found", sQuote(name)))
object <- get(name, envir = envir, inherits = FALSE)
}\if{html}{\out{</div>}}
}
\examples{
find_object("pi")
find_object("pi", mode = "character")   ## non-existing
find_object("rnorm", mode = "function")

f <- local({
  a <- 42
  pi <- 3.14
  function() pi * a
})
env <- find_object("a", from = f)
utils::ls.str(env)

f <- local({
  a <- 42
  local({
    pi <- 3.14
    function() pi * a
  })
})
env_a <- find_object("a", from = f)
utils::ls.str(env_a)
env_pi <- find_object("pi", from = f)
utils::ls.str(env_pi)
stopifnot(
  identical(environment(f), env_pi),
  identical(parent.env(env_pi), env_a)
)

}
