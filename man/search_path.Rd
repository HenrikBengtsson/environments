% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/search_path.R
\name{search_path}
\alias{search_path}
\title{The set of environments searched to locate an object}
\usage{
search_path(until = emptyenv(), envir = parent.frame())
}
\arguments{
\item{until}{A \code{\link[base:environment]{environment}} to consider
the last parent environment.  If \code{until} is not one of the parent
environments, then \code{\link[base:emptyenv]{emptyenv()}} is the
last one.  It is also possible to specify a list of alternative
environments.}

\item{envir}{An \code{\link[base:environment]{environment}}.}
}
\value{
A named list of environments.
The first environment is the calling environment, and
the last is the empty environment.
}
\description{
The set of environments searched to locate an object
}
\examples{
a <- 1

f <- function() {
  b <- 2

  ## Get the environments scanned for 'a'. This shows that the current
  ## environment (= environment()) is first searched, then the parent
  ## environments of 'f' (= parent_envs(environment(f))) are searched.
  ## This is the reason why 'a' (a == 1) in the top environment is used.
  ## Note that, if we call f() from g(), the environment from where f()
  ## is called, which holds another 'a' (a == 42), is *not* involved.
  ## Thus, we get the same result regardless from where f() is called.
  envirs <- search_path(until = globalenv())
  utils::str(envirs)
  
  b * a
}

g <- function() {
  a <- 42
  f()
}

f()
g()
}
