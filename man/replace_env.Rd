% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/replace_env.R
\name{replace_env}
\alias{replace_env}
\title{Replace one of the parent environments with another}
\usage{
replace_env(envir, search, replace, update_parent = TRUE)
}
\arguments{
\item{envir}{An \code{\link[base:environment]{environment}}
or an object with an environment, e.g. a function or a formula.}

\item{search}{A \code{\link[base:environment]{environment}},
among the parents of \code{envir}, to be replaced.
It is possible to specify a list of alternative environments.}

\item{replace}{A \code{\link[base:environment]{environment}}.}

\item{update_parent}{If TRUE, or 1L, the parent environment of
\code{replace} is set to the parent environment of the replaced
"search" environment. If FALSE, or 0L, it is not updated.
If a positive integer greater than one, then that parent
generation is updated, e.g. \code{update_parent = 2L} will update
the parent environment of the \emph{parent} of \code{replace}.}
}
\value{
Invisibly, the replaced environment.
}
\description{
Replace one of the parent environments with another
}
\section{Replace single environment or a sequence of environments}{


Consider below function \code{f()} where \code{pi} is part of \code{environment(f)},
which is a local environment, and \code{a} is a global variable part of
\code{parent_env(f)}.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{cargo <- rnorm(1e6)
a <- 2
f <- local(\{
  pi <- 3.14
  function() \{
    n <- 4
    a * pi / n
  \}
\})
}\if{html}{\out{</div>}}

We can visualize this as:

\if{html}{\out{<div class="sourceCode">}}\preformatted{+----------------------+
| parent_env(f):       |
| cargo = \{ 1e6 \}      |
| a = 2                |
| f                    |
+----------------------+
           ^
           |
+----------------------+
| environment(f):      |
| pi = 3.14            |
+----------------------+
           ^
           |
+======================+
| f():                 | (frame at runtime)
| n = 4                |
+======================+
}\if{html}{\out{</div>}}

In order to evaluate \code{f()}, variables \code{a} and \code{pi}, which are global
("free") variables defined outside and not at runtime in the call
frame, like \code{n} is.  To clarify further what the difference is:
we cannot query \code{n} from \code{f}, but we can query both \code{pi} and \code{a} as
\code{environment(f)$pi} and \code{parent.env(environment(f))$a}.
Similarly, we can also do \code{parent.env(environment(f))$cargo}, but
it is a variable useless for evalating \code{f()}.

When we serialize \code{f} (e.g. export it to a parallel worker), the body
and the formals of the function is included, as well as all
the environments of \code{f} up to where \code{f} itself lives, e.g.
\code{environment(f)} and \code{parent.env(environment(f))} in our example.
However, if the environment where \code{f} lives is the global environment
(= \code{globalenv()}), then it is \emph{not} part of the serialization output.
Imagine we save \code{f} to file, restart R, and load it back, e.g.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{saveRDS(f, "f.rds")
quit(save = "no")
f <- readRDS(f)
}\if{html}{\out{</div>}}

In this case, we will lose \code{a} and \code{cargo}, which is good and bad.
It's bad, because we need to bring \code{a} back, in order to evaluate \code{f()},
e.g.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{f()
#> Error in f() : object 'a' not found
}\if{html}{\out{</div>}}

It's good, because we don't have to pay the price of serializing the
large \code{cargo} object.  Continuing, our unserialized \code{f()} looks like:

\if{html}{\out{<div class="sourceCode">}}\preformatted{+----------------------+
| parent_env(f):       |
| environment^2(f):    | (= globalenv())
| f                    |
+----------------------+
           ^
           |
+----------------------+
| environment(f):      |
| pi = 3.14            |
+----------------------+
           ^
           |
+======================+
| f():                 | (frame at runtime)
| n = 4                |
+======================+
}\if{html}{\out{</div>}}

One way to revive \code{a} is to inject a new grandparent environment that
holds a copy of \code{a}, e.g.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{new <- new.env(parent = parent.env(environment(f)))
new$a <- 2
parent.env(environment(f)) <- new
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{+-----------------------+
| parent_env(f, n = 2): | (= globalenv())
| f                     |
+-----------------------+
           ^
           |
+-----------------------+
| parent_env(f):        | (injected environment)
| a = 2                 |
+-----------------------+
           ^
           |
+-----------------------+
| environment(f):       |
| pi = 3.14             |
+-----------------------+
           ^
           |
+=======================+
| f():                  | (frame at runtime)
| n = 4                 |
+=======================+
}\if{html}{\out{</div>}}

and we can evaluate \code{f()} again;

\if{html}{\out{<div class="sourceCode r">}}\preformatted{f()
#> 1.57
}\if{html}{\out{</div>}}

We can of course built up the above version of \code{f()} \emph{before} serializing,
e.g before we saved to file above. Then it is ready to use when
unserialized, e.g. read back from file.
An alternative way to achive this is to use the \code{replace_env()} function;

\if{html}{\out{<div class="sourceCode r">}}\preformatted{new <- as.environment(list(a = a))
replace_env(f, search = locate_object(f)$envir, replace = new)
}\if{html}{\out{</div>}}

If we save this to file, restart R, and load it back in, we'll see that
we have a fully functional version of \code{f}, e.g. \code{f()} gives 1.57.
}

\examples{
a <- 42
f <- local(function() a)

f_envs <- parent_envs(f, until = environment(), extra = 1L)
names(f_envs)
y <- f()
y

new <- as.environment(list(a = 13, pi = 3.14))
old <- replace_env(f, search = environment(), replace = new)
old

f2_envs <- parent_envs(f, until = list(environment(), parent.env(environment())))
names(f2_envs)

## Note that f() will now see a = 13 in the replaced environment
## rather than a = 42 in the calling environment
z <- f()
z

## Undo changes
old2 <- replace_env(f, search = new, replace = old)
stopifnot(identical(old2, new))

f3_envs <- parent_envs(f, until = environment(), extra = 1L)
stopifnot(identical(f3_envs, f_envs))

## f() will now see a = 42 again
z <- f()
z

}
