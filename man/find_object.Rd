% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_object.R
\name{find_object}
\alias{find_object}
\title{Find the environment where an object exists}
\usage{
find_object(
  name = NULL,
  mode = "any",
  value = NULL,
  from = parent.frame(),
  until = emptyenv(),
  which = c("first", "last", "all")
)
}
\arguments{
\item{name}{The name of the object to locate.}

\item{mode}{The \code{\link[base:mode]{mode}} of the object to locate.}

\item{value}{The R object whose location should be identified.}

\item{from}{An \code{\link[base:environment]{environment}}, or an object
with an environment (e.g. a \code{\link[base:function]{function}} and a
\code{\link[base:tilde]{formula}}), to start search from.}

\item{until}{An \code{\link[base:environment]{environment}} to consider
the last parent environment.  If \code{until} is not one of the parent
environments, then \code{\link[base:emptyenv]{emptyenv()}} is the
last one.  It is also possible to specify a list of alternative
environments.}

\item{which}{If \code{"first"} or \code{"last"}, then the first or the last
occurance of \code{object} among the parent frames is identified and returned.
If \code{"all"}, then all occurances are returned.}
}
\value{
If \code{which = "first"} or \code{which = "last"}, then a named list with
elements \code{name} and \code{envir}, where \code{name} is the name of \code{object}
as it is named in environment \code{envir}, i.e.
\code{identical(envir[[name]], object)}.
If \code{which = "all"}, then a list of (name, environment) lists are
returned; one for each matching occurence.
If the object could not be located when searching from environment
\code{from}, then NULL is returned.
}
\description{
Find the environment where an object exists
}
\section{Find an object by its name and mode}{

The object is looked for in environment \code{from}. If it is found there,
then \code{from} is returned.  If not found there, the parent environment
of \code{from} is searched, and so on, until an environment in \code{until}, or
the "empty" environment (\code{\link[base:emptyenv]{emptyenv()}}) is
reached. In such cases, no matching object could be found and NULL is
returned.

\code{find_object()} with arguments \code{name} and \code{mode} is how \code{\link[base:exists]{base::exists()}},
\code{\link[base:get]{base::get()}}, and \code{\link[base:assign]{base::assign()}} locate an object based on its name
and mode.
For example, \code{exists(name) == !is.null(find_object_by_name(name))}.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{envir <- find_object(name = name)
if (is.null(envir)) stop(sprintf("Object \%s not found", sQuote(name)))
object <- get(name, envir = envir, inherits = FALSE)
}\if{html}{\out{</div>}}
}

\examples{
find_object(name = "pi")
find_object(name = "pi", mode = "character")   ## non-existing
find_object(name = "rnorm", mode = "function")

f <- local({
  a <- 42
  pi <- 3.14
  function() pi * a
})
env <- find_object(name = "a", from = f)$envir
utils::ls.str(env)

f <- local({
  a <- 42
  local({
    pi <- 3.14
    function() pi * a
  })
})
env_a <- find_object(name = "a", from = f)$envir
utils::ls.str(env_a)
env_pi <- find_object(name = "pi", from = f)$envir
utils::ls.str(env_pi)
stopifnot(
  identical(environment(f), env_pi),
  identical(parent.env(env_pi), env_a)
)

find_object(value = rnorm)

my_sum <- rnorm
find_object(value = my_sum)

find_object(value = my_sum, from = parent_env())

my_sum <- local(sum)
find_object(value = my_sum)


my_find <- function(object, envir = parent.frame()) {
  find_object(value = object, from = envir)
}

my_fcn <- local({
  g <- sum  ## this is never found
  function(f = NULL) {
    if (is.null(f)) {
      f <- g  ## this is found first
      my_find(f)
    } else {
      my_find(f, envir = parent.frame()) # skip argument 'f'
    }
  }
})
my_fcn()
my_fcn(my_sum)

topenv()
}
