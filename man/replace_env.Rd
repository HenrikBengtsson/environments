% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/replace_env.R
\name{replace_env}
\alias{replace_env}
\title{Replace one of the parent environments with another}
\usage{
replace_env(envir, search, replace, update_parent = TRUE)
}
\arguments{
\item{envir}{An \code{\link[base:environment]{environment}}.}

\item{search}{A \code{\link[base:environment]{environment}},
among the parents of \code{envir}, to be replaced.
It is possible to specify a list of alternative environments.}

\item{replace}{A \code{\link[base:environment]{environment}}.}

\item{update_parent}{If TRUE, or 1L, the parent environment of
\code{replace} is set to the parent environment of the replaced
"search" environment. If FALSE, or 0L, it is not updated.
If a positive integer greater than one, then that parent
generation is updated, e.g. \code{update_parent = 2L} will update
the parent environment of the \emph{parent} of \code{replace}.}
}
\value{
Invisibly, the replaced environment.
}
\description{
Replace one of the parent environments with another
}
\examples{
a <- 42
f <- local(function() a)

f_envs <- parent_envs(environment(f), until = environment(), extra = 1L)
names(f_envs)
y <- f()
y

new <- as.environment(list(a = 13, pi = 3.14))
old <- replace_env(environment(f), search = environment(), replace = new)
old

f2_envs <- parent_envs(environment(f), until = list(environment(), parent.env(environment())))
names(f2_envs)

## Note that f() will now see a = 13 in the replaced environment
## rather than a = 42 in the calling environment
z <- f()
z

## Undo changes
old2 <- replace_env(environment(f), search = new, replace = old)
stopifnot(identical(old2, new))

f3_envs <- parent_envs(environment(f), until = environment(), extra = 1L)
stopifnot(identical(f3_envs, f_envs))

## f() will now see a = 42 again
z <- f()
z

## Example how to avoid huge local objects being part of a local function,
## which might be costly if the function is serialized, e.g. exported
## to a parallel workers
size_of <- function(object) {
  con <- rawConnection(raw(), open = "w")
  on.exit(close(con))
  serialize(object, connection = con)
  length(rawConnectionValue(con))
}

my_fcn <- function(prune = FALSE) {
  huge <- rnorm(1e6)
  
  n <- 2
  g <- local({
    pi <- 3.14
    function() n * pi
  })

  if (prune) {
    ## Emulate globals::globalsOf(g)
    globals <- list(n = n)
    new <- as.environment(globals)
    g_env <- environment(g)
    old <- replace_env(g_env, search = environment(), replace = new)
    on.exit(replace_env(g_env, search = new, replace = old))
  }

  message(sprintf("Size of g(): \%s bytes", size_of(g)))
  
  g()
}

my_fcn()
my_fcn(prune = TRUE)
my_fcn()
}
