% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prune_fcn.R
\name{prune_fcn}
\alias{prune_fcn}
\title{Remove unused objects from a function's parent environments}
\usage{
prune_fcn(fcn, search = locate_object(fcn)$envir, globals = get_globals(fcn))
}
\arguments{
\item{fcn}{A \code{\link[base:function]{function}}.}

\item{search}{A \code{\link[base:environment]{environment}},
among the parents of \code{envir}, to be replaced.
It is possible to specify a list of alternative environments.}

\item{globals}{A named list of variables to be part of the injected
environment.}
}
\value{
A pruned version of \code{fcn}, with \code{prune_undo} attribute holding
an "undo" function. \emph{WARNING: Make sure to copy this attribute and then
remove it before exporting the function to an external process.}
}
\description{
Remove unused objects from a function's parent environments
}
\examples{
## ------------------------------------------------------------------------
## Example how to avoid huge local objects being part of a local function,
## which might be costly if the function is serialized, e.g. exported
## to a parallel workers
## ------------------------------------------------------------------------

## Call a function with the option to replace the function
## environment with a smaller temporary environment
do_call <- function(fcn, args = list(), envir = parent.frame(),
                    prune = FALSE, from = envir) {
  fcn_name <- as.character(substitute(fcn))
  if (prune) {
    fcn <- prune_fcn(fcn, search = locate_object(fcn, from = from)$envir)
    
    ## Important: We must drop attribute 'prune_undo' before
    ## exporting object, otherwise it will carry the pruned
    ## environment as cargo
    fcn_undo <- attr(fcn, "prune_undo")
    attr(fcn, "prune_undo") <- NULL
    
    on.exit(fcn_undo())
  }

  message(sprintf("Size of '\%s': \%s bytes", fcn_name, size_of(fcn)))
  
  do.call(fcn, args = args, envir = envir)
}

my_fcn <- function(g = NULL, prune = FALSE) {
  cargo <- rnorm(1e6)
  
  n <- 2

  if (is.null(g)) {
    g <- local({
      pi <- 3.14
      function() n * pi
    })
    from <- environment()
  } else {
    from <- parent.frame()
  }

  do_call(g, prune = prune, from = from)
}


## Non-pruned function local to a function carries also large 'cargo' object
my_fcn()

## Pruned function local to a function without large 'cargo' object
my_fcn(prune = TRUE)


## WARNING: Large objects inside local environments of
##          the function will not the pruned!
g <- local({
  cargo <- rnorm(1e6)
  n <- 2
  local({
    pi <- 3.14
    function() n * pi
  })
})

my_fcn(g)
my_fcn(g, prune = TRUE)
}
