% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/do_call.R
\name{do_call}
\alias{do_call}
\title{Prune and call a function with a set arguments}
\usage{
do_call(fcn, args = list(), envir = parent.frame(), prune = FALSE)
}
\arguments{
\item{fcn}{A \code{\link[base:function]{function}}.}

\item{args}{A \code{\link[base:list]{list}} of arguments passed to
the function \code{fcn}.}

\item{envir}{An \code{\link[base:environment]{environment}} within
which to evaluate the call.}

\item{prune}{If TRUE, the environment stack of \code{fcn} is pruned.}
}
\value{
Return the value of function call.
}
\description{
Prune and call a function with a set arguments
}
\examples{
## ------------------------------------------------------------------------
## Example how to avoid huge local objects being part of a local function,
## which might be costly if the function is serialized, e.g. exported
## to a parallel workers
## ------------------------------------------------------------------------

## Report on the 'fcn' size before and after pruning
trace(
  do_call,
  at = 3L, tracer = quote(fcn_size <- size_of(fcn)),
  exit = quote({
    if (prune) {
      message(sprintf("Size of '\%s': \%s bytes (\%s bytes when pruned)",
                      fcn_name, fcn_size, size_of(fcn)))
    } else {
      message(sprintf("Size of '\%s': \%s bytes",
                      fcn_name, fcn_size))
    }
  }),
  print = FALSE
)

my_fcn <- function(g = NULL, prune = FALSE) {
  cargo <- rnorm(1e6)
  
  n <- 2

  if (is.null(g)) {
    g <- local({
      pi <- 3.14
      function() n * pi
    })
  }

  do_call(g, prune = prune)
}


## Non-pruned function local to a function carries also large 'cargo' object
my_fcn()

## Pruned function local to a function without large 'cargo' object
my_fcn(prune = TRUE)


## WARNING: Large objects inside local environments of
##          the function will not the pruned!
g <- local({
  cargo <- rnorm(1e6)
  n <- 2
  local({
    pi <- 3.14
    function() n * pi
  })
})

my_fcn(g)
my_fcn(g, prune = TRUE)

untrace(do_call)
}
\seealso{
\link[base:do.call]{base::do.call}
}
